diff --git a/components/core-components/htdocs/js/event_emitter.js b/components/core-components/htdocs/js/event_emitter.js
new file mode 100644
index 0000000..4d25d83
--- /dev/null
+++ b/components/core-components/htdocs/js/event_emitter.js
@@ -0,0 +1,52 @@
+define(function() {
+	function EventEmitter() {
+		this.topics = {};
+	}
+	
+	/**
+	 * Listen on the given `topic` event with `fn`.
+	 *
+	 * @param {String} topic
+	 * @param {Function} fn
+	 * @param {Mixed} ... options for $.Callbacks handling
+	 */
+	
+	EventEmitter.prototype.on = function(topic, fn) {
+		if(!this.topics) {
+			this.topics = {};
+		}
+		
+		this.topics[topic] = this.topics[topic] || $.Callbacks().add(fn);		
+	};
+	
+	/**
+	 * Emit `topic` event with the given args.
+	 *
+	 * @param {String} topic
+	 * @param {Mixed} ...
+	 */
+	
+	EventEmitter.prototype.emit = function(topic) {
+		if(!this.topics) {
+			this.topics = {};
+		}
+		
+		var args = Array.prototype.slice.call(arguments, 1), 
+			callbacks = this.topics[topic];
+				
+		if(callbacks) {
+			callbacks.fire(args);
+		}
+	};
+	
+	/**
+	 * Method used to remove a specific function from the listeners list.
+	 */
+	EventEmitter.prototype.removeOn = function(topic, fn) {
+		var callbacks = this.topics[topic];
+		
+		callbacks.remove(fn);
+	};
+	
+	return EventEmitter;
+});
\ No newline at end of file
diff --git a/components/core-components/htdocs/js/raintime/messaging.js b/components/core-components/htdocs/js/raintime/messaging.js
index 1603ea6..7138060 100644
--- a/components/core-components/htdocs/js/raintime/messaging.js
+++ b/components/core-components/htdocs/js/raintime/messaging.js
@@ -49,7 +49,7 @@ define(["core-components/raintime/raintime_config",
         
         _addWebSocketsBaseUrl();
         
-        this._intents = new Intents.intents(config);
+        this._intents = new Intents(config);
         
         var self = this;
         
diff --git a/components/core-components/htdocs/js/raintime/messaging_intents.js b/components/core-components/htdocs/js/raintime/messaging_intents.js
index b66ebb9..4e266db 100644
--- a/components/core-components/htdocs/js/raintime/messaging_intents.js
+++ b/components/core-components/htdocs/js/raintime/messaging_intents.js
@@ -34,9 +34,10 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 define(["core-components/client_util", 
+	    "core-components/event_emitter",
         "core-components/socket.io/socket.io",
         "core-components/promised-io/promise",
-        "core-components/jquery-cookie"], function(ClientUtil, SocketIO, Promise) {
+        "core-components/jquery-cookie"], function(ClientUtil, EventEmitter, SocketIO, Promise) {
     /**
      * Class used to implement client intents object.
      */
@@ -50,9 +51,20 @@ define(["core-components/client_util",
         this._intentsSocket = SocketIO.io.connect(intentsUrl);
         
         this._requestCounter = 0;
+        
+        // this attribute keeps track of intents sent from a specific context.
+        this._intentsContext = {};
+        
+        var self = this;
     }
+    
+    ClientUtil.inherits(ClientIntents, EventEmitter);
 
     ClientIntents.INTENT_SOCKET = "/intents";
+    ClientIntents.INTENT_SENT = 1;
+    ClientIntents.INTENT_RECEIVED_ERR = 2;
+    ClientIntents.INTENT_CONTEXTS_CHANGED = "intents_changed";
+    ClientIntents.INTENTS_CONTEXT_READY = "intents_context_ready";
 
     /**
      * Class used to obtain the intents socket url from the configuration.
@@ -67,7 +79,7 @@ define(["core-components/client_util",
         intentsUrl.push(ClientIntents.INTENT_SOCKET);
 
         return intentsUrl.join("");
-    }
+    };
     
     /**
      * Method used to send an intent request.
@@ -100,7 +112,7 @@ define(["core-components/client_util",
         this._requestCounter++;
         
         var session = ClientUtil.getSession();
-        var requestId = session + this._requestCounter;
+        var requestId = this._requestCounter;
 
         request.session = session;
         request.requestId = requestId;
@@ -110,7 +122,7 @@ define(["core-components/client_util",
         this._handleIntentLoaded(request, defer);
                 
         return defer.promise;
-    }
+    };
     
     /**
      * Method used to validate the requests object.
@@ -133,14 +145,14 @@ define(["core-components/client_util",
         }
         
         return true;
-    }
+    };
         
     /**
      * Method used to emit an request intent event.
      */
     ClientIntents.prototype._requestIntent = function(request, defer) {
-        var viewContext = {"moduleId": request.viewContext.moduleId,
-                           "instanceId": request.viewContext.instanceId};        
+		var contextId = this.__getContextId(request);
+
         this._intentsSocket.emit("request_intent", 
                 {
                     intentCategory: request.category,
@@ -149,37 +161,87 @@ define(["core-components/client_util",
                     session: request.session,
                     requestId: request.requestId
                 });
-    }
+		
+        if(!this._intentsContext[contextId]) {
+        	this._intentsContext[contextId] = {};
+        }
+        
+        this._intentsContext[contextId][request.requestId] = {"status": ClientIntents.INTENT_SENT}; 
+        
+        this.emit(ClientIntents.INTENT_CONTEXTS_CHANGED, this._intentsContext[contextId], 
+        		request.viewContext);
+    };
+    
+    /**
+     * Method used to obtain the context id from which the request is sent.
+     * 
+     * @param {Dictionary} request: the intent request object.
+     * @param {ViewContext} viewContext: an optional view context to use for obtaining the id.
+     */
+    ClientIntents.prototype.__getContextId = function(request, viewContext) {    	
+    	viewContext = viewContext || request.viewContext; 
+    	
+    	return viewContext.moduleId + "@" + viewContext.instanceId;
+    };
     
     /**
      * Method used to handle intent_loaded event.
      */
     ClientIntents.prototype._handleIntentLoaded = function(request, defer) {
-        var self = this;
-        
+    	var self = this;
+    	
         this._intentsSocket.on("intent_loaded", function(intentResponse) {
             if(request.requestId == intentResponse.requestId) {
                 if (intentResponse.data.intentType === "view") {
                     request.viewContext.viewManager.displayView(intentResponse.data, true);
                 }
+				
+				var contextId = self.__getContextId(request);
+				var context = self._intentsContext[contextId];
+				
+				delete context[request.requestId];
 
-                defer.resolve(intentResponse.data);
+		        self.emit(ClientIntents.INTENT_CONTEXTS_CHANGED, context, request.viewContext);				
+				
+				if(JSON.stringify(context) == "{}") {
+					self.emit(ClientIntents.INTENTS_CONTEXT_READY, request.viewContext);
+				}
+				
+				defer.resolve(intentResponse.data);
             }
         });
+    };
+    
+    /**
+     * Method used to determine if all intents for a specified view context
+     * are ready or not. 
+     */
+    ClientIntents.prototype.isReady = function(viewContext) {
+    	var contextId = this.__getContextId(undefined, viewContext);
+    	
+    	var context = this._intentsContext[contextId];
+    	
+    	return JSON.stringify(context) == "{}";
     }
     
     /**
      * Method used to handle error received from the intents socket. 
      */
     ClientIntents.prototype._handleError = function(request, defer) {
-        var self = this;
-        
+    	var self = this;
+    	
         this._intentsSocket.on("intent_exception", function(intentResponse) {
            if(request.requestId == intentResponse.requestId) {
+           		var contextId = self.__getContextId(request);
+           	
+		        self._intentsContext[contextId][request.requestId] = {"status": ClientIntents.INTENT_RECEIVED_ERR};
+
+		        self.emit(ClientIntents.INTENT_CONTEXTS_CHANGED, self._intentsContext[contextId], request.viewContext);
+
                 defer.reject(intentResponse.message);
            } 
         });
-    }
+    };
         
-    return {"intents": ClientIntents};
+    return ClientIntents;
 });
diff --git a/components/core-components/htdocs/js/raintime/view_manager.js b/components/core-components/htdocs/js/raintime/view_manager.js
index ea18ac6..e806910 100644
--- a/components/core-components/htdocs/js/raintime/view_manager.js
+++ b/components/core-components/htdocs/js/raintime/view_manager.js
@@ -7,8 +7,9 @@ define(["core-components/client_util"],
      * @constructor
      * @param {ViewContext} viewContext The view context associated with the manager
      */
-    function ViewManager(viewContext) {
+    function ViewManager(viewContext, messaging) {
         this.viewContext = viewContext;
+        this.messaging = messaging;
         this.root = viewContext.getRoot();
 
         /*
@@ -37,19 +38,43 @@ define(["core-components/client_util"],
         if (belongsToSubcomponent) {
             return false;
         }
-
+		
         if (localRequest.test(url)) {
-            /*
-                For local requests, fetch the component and pass it
-                to {@link ViewManager#displayView}.
-            */
-            $.ajax({
-                headers:    {
-                    Accept: "text/json"
-                },
-                dataType:   "json",
-                url:        url
-            }).done(function (data) { self.displayView(data); });
+			function navigateToDest() {
+	            /*
+	                For local requests, fetch the component and pass it
+	                to {@link ViewManager#displayView}.
+	            */
+	            $.ajax({
+	                headers:    {
+	                    Accept: "text/json"
+	                },
+	                dataType:   "json",
+	                url:        url
+	            }).done(function (data) { self.displayView(data); });				
+			}
+			
+			/**
+			 * Method used to navigate to the requested page only
+			 * when all intents associated with the current view context
+			 * are successfully executed. 
+			 * 
+			 * TODO: in the future we need a discriminator passed by the developer
+			 * called sync. By default this should be true.
+			 */
+			function moveNow(viewContext) {
+				if(intents.isReady(self.viewContext)) {
+					intents.removeOn("intents_context_ready", moveNow);					
+										
+					navigateToDest();					
+				}				
+			}			
+			
+			var intents = self.messaging._intents; 
+						
+			moveNow();
+			
+			intents.on("intents_context_ready", moveNow);
         } else {
             window.open(url, "_blank");
         }
diff --git a/components/core-components/htdocs/js/raintime/viewcontext.js b/components/core-components/htdocs/js/raintime/viewcontext.js
index 97f750b..87ee130 100644
--- a/components/core-components/htdocs/js/raintime/viewcontext.js
+++ b/components/core-components/htdocs/js/raintime/viewcontext.js
@@ -29,7 +29,7 @@ define(["core-components/client_util",
         this.instanceId = component.id;
         this.parent = component.parent;
         this.storage = new ClientStorage(this);
-        this.viewManager = new ViewManager(this);
+        this.viewManager = new ViewManager(this, Messaging.messaging);
     }
 
     /**
diff --git a/lib/intents/intents_resolver.js b/lib/intents/intents_resolver.js
index 4e15a04..9294c4e 100644
--- a/lib/intents/intents_resolver.js
+++ b/lib/intents/intents_resolver.js
@@ -201,8 +201,7 @@ IntentsResolver.prototype._getIntentComponentServer = function(intent, testRequi
     var result = controller[method](intentCtx, session);
     
     if(result.then) {
-    	result.then(function(data) { defer.resolve(data); 
-    	},
+    	result.then(function(data) { defer.resolve(data); },
     	function(err) {
     		defer.reject({"message": err});
     	});
diff --git a/lib/intents/intents_socket_handler.js b/lib/intents/intents_socket_handler.js
index 9a622be..b963287 100644
--- a/lib/intents/intents_socket_handler.js
+++ b/lib/intents/intents_socket_handler.js
@@ -69,6 +69,7 @@ exports.SocketIntentsHandler = SocketIntentsHandler;
  */
 function SocketIntentsHandler(intentsResolver) {
     this._intentsResolver = intentsResolver;
+    this._intentsSessions = {};
 };
 
 
@@ -80,6 +81,7 @@ SocketIntentsHandler._INTENT_MULTIPLE_HANDLER   = "intent_multiple_handlers";
 SocketIntentsHandler._INTENT_EXCEPTION          = "intent_exception";
 SocketIntentsHandler._INTENT_LOADED             = "intent_loaded";
 SocketIntentsHandler._INTENT_REQUEST            = "request_intent";
+SocketIntentsHandler._INTENT_SHARED_SESS_TTL	= 1000; // this tells how much a session cache can live.
 
 /**
  * Method used to implement the server section of the protocol.
@@ -89,6 +91,21 @@ SocketIntentsHandler.prototype.handle = function(socket) {
 };
 
 /**
+ * Method used to invalidate the specified session id. This happens
+ * because we want the session to be shared only across very fast ( < 500ms )
+ * consecutive intents sent to the same session.
+ */
+SocketIntentsHandler.prototype._invalidateSharedSession = function(sessid) {
+	var self = this;
+	
+	setTimeout(function() {
+		if(self._intentsSessions[sessid]) {
+			delete self._intentsSessions[sessid];
+		}
+	}, SocketIntentsHandler._INTENT_SHARED_SESS_TTL);
+}
+
+/**
  * Method used to handle a request_intent message. Request intent must also contain a unique request id. This is used to create separate partition among the same channel of a client.
  */
 SocketIntentsHandler.prototype._requestIntent = function(socket) {
@@ -125,7 +142,15 @@ SocketIntentsHandler.prototype._requestIntent = function(socket) {
             try {
             	var sessionId = data.session;
             	
-                data.intentContext.session = new SocketsSession(sessionId, session.session);
+            	if(!self._intentsSessions[sessionId]) {
+                	data.intentContext.session = new SocketsSession(sessionId, session.session);
+                	
+                	self._intentsSessions[sessionId] = data.intentContext.session;
+                	self._invalidateSharedSession(sessionId); 
+                }
+                else {
+                	data.intentContext.session = self._intentsSessions[sessionId];
+                }
                 
                 response = self._intentsResolver.resolveIntent(data.intentCategory, data.intentAction, data.intentContext, data.preferences);
                 
@@ -142,7 +167,7 @@ SocketIntentsHandler.prototype._requestIntent = function(socket) {
                 }
                 else {
                     self._sendMultipleHandlers(socket, response, data.requestId);
-                }                     
+                }
             }
             catch(err) {
                 self._sendException(socket, err.message, data.requestId);
@@ -196,7 +221,7 @@ SocketIntentsHandler.prototype._sendIntentLoaded = function(socket, data, reques
  * methods. It transparently invoke session store methods.
  * 
  * @param {String} sessionId Session unique identifier.
- * @param session Session object.
+ * @param sessionMap Session connect object.
  */
 function SocketsSession(sessionId, sessionMap) {
 	this._sessionId = sessionId;
@@ -211,8 +236,9 @@ function SocketsSession(sessionId, sessionMap) {
  * @param {Function} fn Function we want to execute when the value is correctly persisted.
  */
 SocketsSession.prototype.set = function(key, value, fn) {
+	var self = this;
 	this._sessionMap[key] = value;
-	
+		
 	Server.session.set(this._sessionId, this._sessionMap, fn);
 };
 
@@ -224,5 +250,4 @@ SocketsSession.prototype.set = function(key, value, fn) {
  */
 SocketsSession.prototype.get = function(key) {
 	return this._sessionMap[key];
-	
 };
\ No newline at end of file
diff --git a/lib/session_store.js b/lib/session_store.js
index 476be3a..bad1744 100644
--- a/lib/session_store.js
+++ b/lib/session_store.js
@@ -11,6 +11,7 @@
  */
 
 var Store = require('../node_modules/connect/lib/middleware/session/store')
+  , sys		= require("sys")
   , utils = require('../node_modules/connect/lib/utils')
   , Session = require('../node_modules/connect/lib/middleware/session/session');
 
@@ -29,7 +30,7 @@ var RainSessionStore = module.exports = function RainSessionStore(socketclient)
  * Inherit from `Store.prototype`.
  */
 
-RainSessionStore.prototype.__proto__ = Store.prototype;
+sys.inherits(RainSessionStore, Store);
 
 /**
  * Attempt to fetch session by the given `sid`.
@@ -135,4 +136,4 @@ RainSessionStore.prototype.clear = function(fn){
 
 RainSessionStore.prototype.length = function(fn){
   fn(null, Object.keys(this.sessions).length);
-};
+};
\ No newline at end of file
diff --git a/lib/sockets_container.js b/lib/sockets_container.js
index 6012cfc..9ee7fbe 100644
--- a/lib/sockets_container.js
+++ b/lib/sockets_container.js
@@ -107,7 +107,7 @@ SocketsFactory.prototype._getSession = function(intentContext) {
     
     Server.session.get(sessionId, function(arg, sess) {
         sessionPromise.resolve({"session": sess});
-    });
+    });    	
     
     return sessionPromise.promise;
 }
