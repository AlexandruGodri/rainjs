





..
    Classes and methods

Class ProxyStore
================================================================================

..
   class-title


Proxy store implementation for connect. Uses dependency injection to aggregate implementations
for local and remote stores. By default, a :js:class:`MemoryStore` is used for the local store
and a :js:class:`HipStore` is used for the remote store. It uses lazy instantiation of stores.

It exposes the :js:func:`ProxyStore#authorize` method for switching the store implementation at
runtime, i.e. providing a way to switch the store at runtime after login.








    


Constructor
-----------

.. js:class:: ProxyStore([LocalStore], [RemoteStore])



    
    :param connect.session.Store LocalStore: 
        store class to use for local storage (*Default*: MemoryStore)
    
    :param connect.session.Store RemoteStore: 
        store class to use for remote storage (*Default*: MemoryStore)
    







Methods
-------

..
   class-methods


authorize
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:function:: ProxyStore#authorize(sid, remotesid, sess)


    
    :param String sid: 
        the session id to be authorized 
    
    :param String remotesid: 
        the remote session id 
    
    :param connect.session.Session sess: 
        the session to authorize 
    




Authorizes a session.

Stores the session id in the list of authorized sessions that use the remote store.









    



destroy
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:function:: ProxyStore#destroy(sid, fn)


    
    :param String sid: 
        the session id 
    
    :param Function fn: 
        the callback that is invoked after the session is destroyed 
    




Destroys the session with a given session id.

Destroys the session both on the remote and on the local stores.









    



get
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:function:: ProxyStore#get(sid, fn)


    
    :param String sid: 
        the session id 
    
    :param Function fn: 
        the callback that is invoked when the session is available 
    




Get the session from the store with a given session id.









    



getRemoteSid
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:function:: ProxyStore#getRemoteSid(sid)


    
    :param String sid: 
        the session id 
    



    
    :returns String:
        the remote session id 
    


Gets the remote session id.









    



set
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:function:: ProxyStore#set(sid, sess, fn)


    
    :param String sid: 
        the session id 
    
    :param connect.session.Session sess: 
        the session to save 
    
    :param Function fn: 
        the callback that is invoked after the session is saved 
    




Save the session to the store with a given session id.









    




    

Attributes
----------

..
   class-attributes


authorizedSessions
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:attribute:: authorizedSessions   


the object associating authorized sids with remote sids








    



localStore
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:attribute:: localStore   


the local store instance








    



remoteStore
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

.. js:attribute:: remoteStore   


the remote store instance








    






