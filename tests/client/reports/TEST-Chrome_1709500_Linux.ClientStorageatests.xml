<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Chrome_1709500_Linux.ClientStorage tests" errors="0" failures="7" tests="7" time="30.416">
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="shoud have Raintime" time="0.0040">
<failure type="failed" message="[{&quot;message&quot;:&quot;Error: Mismatched anonymous define() module: function (modUtil) {\n    var modUtil = modUtil.get();\n\n    describe(\&quot;clientUtil\&quot;, function () {\n        describe(\&quot;bind\&quot;, function () {\n            it(\&quot;validates parameters\&quot;, function () {\n                var bindNull = function () { modUtil.bind(null); };\n\n                expect(bindNull).toThrow(\&quot;expected f to be a function\&quot;);\n            });\n\n            it(\&quot;binds scope\&quot;, function () {\n                var dave = {\n                    name: \&quot;Dave Watson\&quot;,\n                    getName: function () {\n                        return this.name;\n                    }\n                };\n\n                var jeff = {\n                    name: \&quot;Jeff Garner\&quot;\n                };\n\n                var getJeffsName = modUtil.bind(dave.getName, jeff);\n\n                expect(getJeffsName()).toEqual(jeff.name);\n            });\n\n            it(\&quot;binds a single argument\&quot;, function () {\n                var word = \&quot;hello\&quot;\n                  , mute\n                  , voice;\n\n                function echo(sound) {\n                    return sound;\n                }\n\n                mute = echo();\n                voice = modUtil.bind(echo, null, \&quot;hello\&quot;);\n\n                expect(mute).toBeUndefined();\n                expect(voice()).toEqual(word);\n            });\n\n            it(\&quot;binds multiple arguments\&quot;, function () {\n                var hello = \&quot;hello\&quot;\n                  , space = \&quot; \&quot;\n                  , world = \&quot;world\&quot;\n                  , mute\n                  , voice;\n\n                function echo() {\n                    return Array.prototype.join.call(arguments, \&quot;\&quot;);\n                }\n\n                mute = echo();\n                voice = modUtil.bind(echo, null, hello, space, world);\n\n                expect(mute).toEqual(\&quot;\&quot;);\n                expect(voice()).toEqual(hello + space + world);\n            });\n\n            xit(\&quot;passes arguments to binder\&quot;, function () {\n            });\n        });\n    });\n}\nhttp://requirejs.org/docs/errors.html#mismatch&quot;,&quot;name&quot;:&quot;Error&quot;,&quot;stack&quot;:&quot;\t\t\tError: Mismatched anonymous define() module: function (modUtil) {\n\t\t\tvar modUtil = modUtil.get();\n\t\t\t\n\t\t\tdescribe(\&quot;clientUtil\&quot;, function () {\n\t\t\tdescribe(\&quot;bind\&quot;, function () {\n\t\t\tit(\&quot;validates parameters\&quot;, function () {\n\t\t\tvar bindNull = function () { modUtil.bind(null); };\n\t\t\t\n\t\t\texpect(bindNull).toThrow(\&quot;expected f to be a function\&quot;);\n\t\t\t});\n\t\t\t\n\t\t\tit(\&quot;binds scope\&quot;, function () {\n\t\t\tvar dave = {\n\t\t\tname: \&quot;Dave Watson\&quot;,\n\t\t\tgetName: function () {\n\t\t\treturn this.name;\n\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tvar jeff = {\n\t\t\tname: \&quot;Jeff Garner\&quot;\n\t\t\t};\n\t\t\t\n\t\t\tvar getJeffsName = modUtil.bind(dave.getName, jeff);\n\t\t\t\n\t\t\texpect(getJeffsName()).toEqual(jeff.name);\n\t\t\t});\n\t\t\t\n\t\t\tit(\&quot;binds a single argument\&quot;, function () {\n\t\t\tvar word = \&quot;hello\&quot;\n\t\t\t, mute\n\t\t\t, voice;\n\t\t\t\n\t\t\tfunction echo(sound) {\n\t\t\treturn sound;\n\t\t\t}\n\t\t\t\n\t\t\tmute = echo();\n\t\t\tvoice = modUtil.bind(echo, null, \&quot;hello\&quot;);\n\t\t\t\n\t\t\texpect(mute).toBeUndefined();\n\t\t\texpect(voice()).toEqual(word);\n\t\t\t});\n\t\t\t\n\t\t\tit(\&quot;binds multiple arguments\&quot;, function () {\n\t\t\tvar hello = \&quot;hello\&quot;\n\t\t\t, space = \&quot; \&quot;\n\t\t\t, world = \&quot;world\&quot;\n\t\t\t, mute\n\t\t\t, voice;\n\t\t\t\n\t\t\tfunction echo() {\n\t\t\treturn Array.prototype.join.call(arguments, \&quot;\&quot;);\n\t\t\t}\n\t\t\t\n\t\t\tmute = echo();\n\t\t\tvoice = modUtil.bind(echo, null, hello, space, world);\n\t\t\t\n\t\t\texpect(mute).toEqual(\&quot;\&quot;);\n\t\t\texpect(voice()).toEqual(hello + space + world);\n\t\t\t});\n\t\t\t\n\t\t\txit(\&quot;passes arguments to binder\&quot;, function () {\n\t\t\t});\n\t\t\t});\n\t\t\t});\n\t\t\t}\n\t\t\thttp://requirejs.org/docs/errors.html#mismatch\n\t\t\tat makeError (/home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:76:17)\n\t\t\tat /home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1032:40\n\t\t\tat Object.require (/home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1263:25)\n\t\t\tat /home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1470:24\n\t\t\tat [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:34:9)&quot;},{&quot;message&quot;:&quot;Expected null not to be null.&quot;,&quot;name&quot;:&quot;Error&quot;,&quot;stack&quot;:&quot;\t\t\tError: Expected null not to be null.\n\t\t\tat [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:70:30)&quot;},{&quot;message&quot;:&quot;TypeError: Cannot read property 'ComponentRegistry' of null&quot;,&quot;name&quot;:&quot;TypeError&quot;,&quot;stack&quot;:&quot;\t\t\tTypeError: Cannot read property 'ComponentRegistry' of null\n\t\t\tat [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:63:17)&quot;}]">			Error: Mismatched anonymous define() module: function (modUtil) {
			var modUtil = modUtil.get();
			
			describe("clientUtil", function () {
			describe("bind", function () {
			it("validates parameters", function () {
			var bindNull = function () { modUtil.bind(null); };
			
			expect(bindNull).toThrow("expected f to be a function");
			});
			
			it("binds scope", function () {
			var dave = {
			name: "Dave Watson",
			getName: function () {
			return this.name;
			}
			};
			
			var jeff = {
			name: "Jeff Garner"
			};
			
			var getJeffsName = modUtil.bind(dave.getName, jeff);
			
			expect(getJeffsName()).toEqual(jeff.name);
			});
			
			it("binds a single argument", function () {
			var word = "hello"
			, mute
			, voice;
			
			function echo(sound) {
			return sound;
			}
			
			mute = echo();
			voice = modUtil.bind(echo, null, "hello");
			
			expect(mute).toBeUndefined();
			expect(voice()).toEqual(word);
			});
			
			it("binds multiple arguments", function () {
			var hello = "hello"
			, space = " "
			, world = "world"
			, mute
			, voice;
			
			function echo() {
			return Array.prototype.join.call(arguments, "");
			}
			
			mute = echo();
			voice = modUtil.bind(echo, null, hello, space, world);
			
			expect(mute).toEqual("");
			expect(voice()).toEqual(hello + space + world);
			});
			
			xit("passes arguments to binder", function () {
			});
			});
			});
			}
			http://requirejs.org/docs/errors.html#mismatch
			at makeError (/home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:76:17)
			at /home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1032:40
			at Object.require (/home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1263:25)
			at /home/abularca/Work/rain/components/core-components/htdocs/js/require-jquery.js:1470:24
			at [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:34:9)

			Error: Expected null not to be null.
			at [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:70:30)

			TypeError: Cannot read property 'ComponentRegistry' of null
			at [object Object].&lt;anonymous&gt; (/home/abularca/Work/rain/tests/client/tests/client_storage.spec.js:63:17)

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should have a component" time="5.062">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should have contain a controller" time="5.06">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should have a viewContext" time="5.059">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should have a ClientStorage" time="5.06">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should store and retrive a key" time="5.117">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
<testcase classname="Chrome_1709500_Linux.ClientStorage tests" name="should be able to remove a key" time="5.054">
<failure type="failed" message="[{&quot;message&quot;:&quot;timeout: timed out after 5000 msec waiting for Waiting for Raintime to load&quot;,&quot;name&quot;:&quot;timeout&quot;,&quot;stack&quot;:&quot;\t\t\t&quot;}]">			

</failure>
</testcase>
</testsuite>
