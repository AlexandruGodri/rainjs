#!/usr/bin/env node

var fs = require('fs')
  , mod_path = require('path')
  , color = require('colors')
  , exec = require('child_process').exec
  , optimist = require('optimist')
  , wrench = require('wrench')
  , program = require('commander')
  , daemon = require('daemon')
  , platform_list = ["nodejs (default)", "pustefix", "wicket"]
  , utils   = require('./lib/utils.js')
  , sys_util = require('util');

program
    .usage("<options> <command>")
    .option("-d, --debug", "debugging")
    .option("-c, --conf <path_to_conf>", "start server with custom configuration")
    .option("-m, --mothership-conf <path_to_conf>", "start server with custom mothership configuration")
    .option("-p, --platform <platform>", [
          "choose the platform for the application",
          "      Available platforms:            "+platform_list.join(', ')].join('\n'));

program
    .command("create-app <path> <app-name>")
    .description("create an application project")
    .action(createApplication);

program
    .command("start [#pid]")
    .description([
       "1. on project root the command starts the server and creates an pid file"
    ].join('\n'))
    .action(start);

program
    .command("stop [#pid]")
    .description([
       "1. on project root the command stops the associated server",
       "2. with [#pid] stops the server with the associated process id"
    ].join('\n'))
    .action(stop);

program
    .command("restart [#pid]")
    .description([
       "1. on project root the command restarts the associated server",
       "2. with [#pid] restarts the server with the associated process id"
    ].join('\n'))
    .action(restart);

program
    .command("list [server|mothership]")
    .description("lists all running server/motherships, with [type] only 1 of both will be displayed")
    .action(list);

program
    .command("stopall")
    .description("shutting down all server and motherships")
    .action(stopall);


var extendedHelp = [
    '  Examples:'
    ,''
    ,'    $ rain create-app /home/username/workspace newProject'
    ,''
    ,'    $ rain start'
    ,'    $ rain start -c /home/username/workspace/custom_confs/server.conf'
    ,'    $ rain start -m /home/username/workspace/custom_confs/mothership.conf'
    ,''
    ,'    $ cd /home/username/workspace/newProject | rain stop'
    ,'    $ rain stop 5361'
    ,''
].join('\n');

program.on('--help', function(){
  console.log(extendedHelp);
});

program.parse(process.argv);
if(!program.mothership && !program.debug && program.rawArgs.length <= 2)
  console.log(program.helpInformation()+'\n\n\n'+extendedHelp);

/**
 * create new application
 */
function createApplication(path, app_name){
  var app_path = mod_path.join(mod_path.resolve(path), app_name);
  if(!mod_path.existsSync(app_path)){
    log("Directory "+app_path.blue+" does not exist!");
    program.confirm('Create Directory?  -  yes/no: ', function(yes){
      process.stdin.destroy();
      if(yes){
        if(setupApplication(program.platform, app_path, app_name)){
          log(
              "Application created".green
              ,""
              ,"Go to the root directory of the project and start the server."
              ,"  $ cd "+app_path+" | rain start"
              ,""
              ,"Happy developing ;-)".rainbow
              ,""
            );
        } else {
          log("Error: problem to setup the application".red);
        }
      }
    });
  }
};

function setupApplication(platform, app_path, app_name){
  switch(platform){
    case "wicket":
      console.log("wicket skeleton not implemented yet");
      break;
      
    case "nodejs":
    default:
      wrench.copyDirSyncRecursive(mod_path.resolve(mod_path.join(__dirname, '../init/_skeleton')), app_path);
      var metajs = fs.readFileSync(app_path+'/meta.json', 'utf8').replace(/\{\{application_name\}\}/g, app_name);
      fs.writeFileSync(app_path+'/meta.json', metajs, 'utf8');
      break;
  }
  
  return true;
};

function debug(){
  console.log(program);
};

function start(){
  var actPath     = process.cwd()
      ,server     = require('../lib/server_new')
      ,child      = require('child_process');
  
  if(!utils.checkValidProject(actPath)){
    console.log("this is not a compatible project!".red);
    return false;
  }
  
  if(mod_path.existsSync(mod_path.join(actPath, '.server.props'))){
    console.log("server is still running!");
    return false;
  }
  
  //===========START MOTHERSHIP===========
  var ms = child.spawn('node', [__dirname+'/lib/start_mothership.js', program.mothershipConf ? program.mothershipConf : mod_path.join(__dirname, '..', 'init', 'conf', 'mothership.conf.default')]);
  ms.stdout.on('data', function(data){
    if(data == "mothership started\n"){
      startServer();
    } else {
      process.stdout.write(data.toString());
    }
  })
  
  //===========MOTHERSHIP STARTED===========

  function startServer(){
    //===========START RAIN SERVER===========  
    var server_conf = fs.readFileSync(
        program.conf ? program.conf : mod_path.join(__dirname, '..', 'init', 'conf', 'server.conf.default')
    , 'utf8');
    server_conf = server_conf.replace('{{modules_path}}', mod_path.join(actPath, '..'));
    var serverlist = mod_path.join(__dirname, '..', '.process', 'serverlist')
        ,spid_path = mod_path.join(__dirname, '..', '.process', 's_pid');
    
    //start server
    server({'conf' : JSON.parse(server_conf)}, function(){
      daemon.daemonize(mod_path.join(actPath, 'server.log'), null, function(err, pid){
        var daemon_process = this.process;
        
        if (err) {
          return sys_util.puts('Error starting daemon: ' + err);
        }
        
        daemon_process.title = "rain-server";
        
        //create configurationfile
        var server_prop_file = [
          '{',
          '  "pid" : '+pid+',',
          '  "path" : "'+actPath+'",',
          '  "conf" : '+server_conf,
          '}'
        ].join('\n');
        var conf_spid    = mod_path.join(spid_path, "server.conf."+pid)
           ,conf_project = mod_path.join(actPath, ".server.props");
        //write server config
        fs.writeFileSync(conf_spid, server_prop_file);
        fs.writeFileSync(conf_project, server_prop_file);
        //clear conf files if server shutting down
        daemon_process.on('SIGTERM', function(){
          fs.unlinkSync(conf_spid);
          fs.unlinkSync(conf_project);
          daemon_process.exit(0);
        });
        
        daemon_process.on('uncaughtException', function (err) {
          console.log('Caught exception: ' + err);
          daemon_process.kill(pid, 'SIGTERM');
        });
      });
    });
    //===========RAIN SERVER STARTED===========
  }
};

function stop(pid){
  if(!pid){
    var actPath = process.cwd();
    if(utils.checkValidProject(actPath)){
      if(mod_path.existsSync(mod_path.join(actPath, '.server.props'))){
        pid = JSON.parse(fs.readFileSync(mod_path.join(actPath, '.server.props'))).pid;
      } else {
        console.log('No running server for this project');
        process.exit(0);
      }
    } else {
      console.log("this is not a compatible project!".red);
      process.exit(1);
    }
  }
  process.kill(pid, 'SIGTERM');
  console.log("Server stopped!".green);
  process.exit(0);
};

function restart(){
  console.log("not implemented yet!".green);
};

function list(type){

  if(!type || type == 'mothership'){
    console.log("mothership list");
  }
  
  if(!type || type == 'server'){
    console.log("server list");
  }
};

function stopall(){
  var server = utils.getServerList(),
      motherships = utils.getMothershipList(),
      countServer = 0,
      countMS = 0;
  
  //shutdown all server
  for(var i = server.length; i--;){
    process.kill(server[i].substring(12),'SIGTERM');
    countServer++;
  }
  
  //shutdown all motherships
  for(var i = motherships.length; i--;){
    var result = motherships[i].match(/([0-9]+)$/);
    process.kill(result[1],'SIGTERM');
    countMS++;
  }
  
  console.log("%s Server shutted down!".green, countServer);
  console.log("%s Motherships shutted down!".green, countMS);
};



function log(){
  var arr_String = [''];
  for(var str in arguments){
    arr_String.push(arguments[str]);
  }
  console.log(arr_String.join('\n'));
};